const fs = require("fs");
const glob = require("glob-fs")({ gitignore: true });
const files = glob.readdirSync("./src/vars/**/*.json", {});

let file = `// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\n`;
let fileDocs = `// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\n`;
let pathsCamelCase = [];

files.forEach(filePath => {

    process.platform.includes("win") ? filePath = filePath.replace(/\\/g,"/") : '';

	filePath = filePath
		.split("/")
		.splice(2, filePath.split("/").length - 2)
		.join("/")
        .replace(".json", "");

    let filePathCamelCase = filePath.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase(); });

    file += "import {defineVars as " + filePathCamelCase + "} from './" + filePath + ".json'\n";
    fileDocs += "import " + filePathCamelCase + " from '../vars/" + filePath + ".json'\n";

	pathsCamelCase.push(filePathCamelCase);

});
file += '\nexport {\n';
fileDocs += "\nconst context = {\n";

for (const [index, path] of pathsCamelCase.entries()) {
	file += '\t' + path;
	fileDocs += '\t' + path + ": " + path;
	if(index+1 < pathsCamelCase.length){
		file += ",\n";
		fileDocs += ",\n";
	}else{
		file += "\n";
		fileDocs += "\n";
	}
}
file += "};\n";
fileDocs += "};\n\nexport {\n\tcontext\n};\n";

fs.writeFileSync("src/vars/index.js", file);
fs.writeFileSync("src/docs/vars.config.babel.js", fileDocs);
